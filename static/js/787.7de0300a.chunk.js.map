{"version":3,"file":"static/js/787.7de0300a.chunk.js","mappings":"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","sources":["components/reviews/Reviews.js","../node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js","getMovies.js","../node_modules/nanoid/index.browser.js"],"sourcesContent":["import Loading from 'components/loading/Loading';\nimport { GetMoviesReviews } from 'getMovies';\nimport { nanoid } from 'nanoid';\nimport { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\n\nconst Reviews = () => {\n  const [reviews, setReviews] = useState([]);\n  const [error, setError] = useState(null);\n  const [status, setStatus] = useState('idl');\n\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    setStatus('pending');\n    GetMoviesReviews(movieId)\n      .then(item => {\n        const results = item.results.map(({ author, content, id }) => {\n          return {\n            author,\n            content,\n            id,\n          };\n        });\n\n        return results;\n      })\n      .then(review => {\n        setStatus('resolve');\n        setReviews(review);\n      })\n      .catch(error => {\n        setStatus('rejected');\n        setError(error.message);\n      });\n  }, [movieId]);\n\n  return (\n    <div>\n      {status === 'rejected' && <h1>{error}</h1>}\n      {status === 'pending' && <Loading />}\n      {status === 'resolve' && (\n        <ul>\n          {reviews.map(({ author, content }) => (\n            <li key={nanoid()}>\n              <h4>Author: {author}</h4>\n              <p>{content}</p>\n            </li>\n          ))}\n        </ul>\n      )}\n      {reviews.length === 0 && <p> We don`t have reviews for this movie</p>}\n    </div>\n  );\n};\n\nexport default Reviews;\n","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}","const BASIK_URL = 'https://api.themoviedb.org/3';\nconst URL_SETTINGS = '/trending/all/day';\nconst API_KEY = '50c081603ce7d17904e2fe1fff4c28c2';\n\nexport const GetTrending = async () => {\n  const response = await fetch(\n    `${BASIK_URL}${URL_SETTINGS}?api_key=${API_KEY}`\n  );\n  if (!response.ok) {\n    return Promise.reject(new Error('Something went wrong'));\n  }\n  return await response.json();\n};\n\nexport const GetMoviesName = async query => {\n  const response = await fetch(\n    `${BASIK_URL}/search/movie?api_key=${API_KEY}&language=en-US&query=${query}&page=1&include_adult=false`\n  );\n  if (!response.ok) {\n    return Promise.reject(\n      new Error(`Movie with that name: ${query} not found`)\n    );\n  }\n  return await response.json();\n};\n\nexport const GetMoviesDetails = async MovieId => {\n  const response = await fetch(\n    `${BASIK_URL}/movie/${MovieId}?api_key=${API_KEY}&language=en-US`\n  );\n  if (!response.ok) {\n    return Promise.reject(\n      new Error(`Sorry the movie with this id: ${MovieId} was not found`)\n    );\n  }\n  return await response.json();\n};\n\nexport const GetMoviesCredits = async MovieId => {\n  const response = await fetch(\n    `${BASIK_URL}/movie/${MovieId}/credits?api_key=${API_KEY}&language=en-US`\n  );\n  if (!response.ok) {\n    return Promise.reject(\n      new Error(`Sorry the movie with this id: ${MovieId} was not found`)\n    );\n  }\n  return await response.json();\n};\n\nexport const GetMoviesReviews = async MovieId => {\n  const response = await fetch(\n    `${BASIK_URL}/movie/${MovieId}/reviews?api_key=${API_KEY}&language=en-US`\n  );\n  if (!response.ok) {\n    return Promise.reject(\n      new Error(`Sorry the movie with this id: ${MovieId} was not found`)\n    );\n  }\n  return await response.json();\n};\n","import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n"],"names":["useState","reviews","setReviews","error","setError","status","setStatus","movieId","useParams","useEffect","GetMoviesReviews","then","item","results","map","author","content","id","review","catch","message","nanoid","length","asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","value","done","Promise","_asyncToGenerator","fn","self","this","args","arguments","apply","err","undefined","BASIK_URL","API_KEY","GetTrending","fetch","response","ok","Error","json","GetMoviesName","query","GetMoviesDetails","MovieId","GetMoviesCredits","size","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase"],"sourceRoot":""}